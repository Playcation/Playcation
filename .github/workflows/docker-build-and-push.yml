name: docker multi-stage build

#on:
#  workflow_run:
#    workflows: ["GitHub Actions Demo"]  # test.yml에서 정의한 workflow name과 동일하게 설정해야 함
#    branches:
#      - main  # 🔹 main 브랜치에서만 실행되도록 설정
#    types:
#      - completed  # test.yml이 완료된 후 실행됨

on:
  push:
    branches:
      - feature-userController3  # 🔹 특정 브랜치에서만 실행

  # https://github.com/marketplace/actions/build-and-push-docker-images
jobs:
  docker-build-and-push:
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # 🔹 test.yml이 성공한 경우에만 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature-userController3'  # 🔹 push 이벤트 + feature-userController3 브랜치일 때만 실행
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
  # Ec2 에 배포
  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # https://github.com/marketplace/actions/ssh-remote-commands
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_USERNAME=${{secrets.DB_USERNAME}} \
                -e DB_PASSWORD=${{secrets.DB_PASSWORD}} \
                -e DB_URL_1=${{secrets.DB_URL_1}} \
                -e DB_URL_2=${{secrets.DB_URL_2}} \
                -e GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}} \
                -e GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}} \
                -e JWT_KEY=${{secrets.JWT_KEY}} \
                -e NAVER_CLIENT_ID=${{secrets.NAVER_CLIENT_ID}} \
                -e NAVER_CLIENT_SECRET=${{secrets.NAVER_CLIENT_SECRET}} \
                -e REDIS_HOST=${{secrets.REDIS_HOST}} \
                -e REDIS_PASSWORD=${{secrets.REDIS_PASSWORD}} \
                -e S3_ACCESSKEY=${{secrets.S3_ACCESSKEY}} \
                -e S3_GAME_BUCKET=${{secrets.S3_GAME_BUCKET}} \
                -e S3_IMAGE_BUCKET=${{secrets.S3_IMAGE_BUCKET}} \
                -e S3_SECRETKEY=${{secrets.S3_SECRETKEY}} \
                -e SPRING_MAIL_HOST=${{secrets.SPRING_MAIL_HOST}} \
                -e SPRING_MAIL_PASSWORD=${{secrets.SPRING_MAIL_PASSWORD}} \
                -e SPRING_MAIL_USERNAME=${{secrets.SPRING_MAIL_USERNAME}} \
                -e TOSS_CLIENT_KEY=${{secrets.TOSS_CLIENT_KEY}} \
                -e TOSS_SECRETE_KEY=${{secrets.TOSS_SECRETE_KEY}} \
                -e REDISSON_HOST=${{secrets.REDISSON_HOST}} \
                -e REDISSON_PASSWORD=${{secrets.REDISSON_PASSWORD}} \
                -e BACKEND_URL=${{secrets.BACKEND_URL}} \
                -e FRONT_URL=${{secrets.FRONT_URL}} \
                ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
